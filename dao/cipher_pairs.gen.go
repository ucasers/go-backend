// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ucasers/go-backend/backend/models"
)

func newCipherPair(db *gorm.DB, opts ...gen.DOOption) cipherPair {
	_cipherPair := cipherPair{}

	_cipherPair.cipherPairDo.UseDB(db, opts...)
	_cipherPair.cipherPairDo.UseModel(&models.CipherPair{})

	tableName := _cipherPair.cipherPairDo.TableName()
	_cipherPair.ALL = field.NewAsterisk(tableName)
	_cipherPair.ID = field.NewUint32(tableName, "id")
	_cipherPair.Name = field.NewString(tableName, "name")
	_cipherPair.Pwd = field.NewString(tableName, "pwd")
	_cipherPair.Key = field.NewString(tableName, "key")
	_cipherPair.OwnerID = field.NewUint32(tableName, "owner_id")
	_cipherPair.Owner = cipherPairBelongsToOwner{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Owner", "models.User"),
	}

	_cipherPair.fillFieldMap()

	return _cipherPair
}

type cipherPair struct {
	cipherPairDo cipherPairDo

	ALL     field.Asterisk
	ID      field.Uint32
	Name    field.String
	Pwd     field.String
	Key     field.String
	OwnerID field.Uint32
	Owner   cipherPairBelongsToOwner

	fieldMap map[string]field.Expr
}

func (c cipherPair) Table(newTableName string) *cipherPair {
	c.cipherPairDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cipherPair) As(alias string) *cipherPair {
	c.cipherPairDo.DO = *(c.cipherPairDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cipherPair) updateTableName(table string) *cipherPair {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint32(table, "id")
	c.Name = field.NewString(table, "name")
	c.Pwd = field.NewString(table, "pwd")
	c.Key = field.NewString(table, "key")
	c.OwnerID = field.NewUint32(table, "owner_id")

	c.fillFieldMap()

	return c
}

func (c *cipherPair) WithContext(ctx context.Context) ICipherPairDo {
	return c.cipherPairDo.WithContext(ctx)
}

func (c cipherPair) TableName() string { return c.cipherPairDo.TableName() }

func (c cipherPair) Alias() string { return c.cipherPairDo.Alias() }

func (c cipherPair) Columns(cols ...field.Expr) gen.Columns { return c.cipherPairDo.Columns(cols...) }

func (c *cipherPair) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cipherPair) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 6)
	c.fieldMap["id"] = c.ID
	c.fieldMap["name"] = c.Name
	c.fieldMap["pwd"] = c.Pwd
	c.fieldMap["key"] = c.Key
	c.fieldMap["owner_id"] = c.OwnerID

}

func (c cipherPair) clone(db *gorm.DB) cipherPair {
	c.cipherPairDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cipherPair) replaceDB(db *gorm.DB) cipherPair {
	c.cipherPairDo.ReplaceDB(db)
	return c
}

type cipherPairBelongsToOwner struct {
	db *gorm.DB

	field.RelationField
}

func (a cipherPairBelongsToOwner) Where(conds ...field.Expr) *cipherPairBelongsToOwner {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a cipherPairBelongsToOwner) WithContext(ctx context.Context) *cipherPairBelongsToOwner {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a cipherPairBelongsToOwner) Session(session *gorm.Session) *cipherPairBelongsToOwner {
	a.db = a.db.Session(session)
	return &a
}

func (a cipherPairBelongsToOwner) Model(m *models.CipherPair) *cipherPairBelongsToOwnerTx {
	return &cipherPairBelongsToOwnerTx{a.db.Model(m).Association(a.Name())}
}

type cipherPairBelongsToOwnerTx struct{ tx *gorm.Association }

func (a cipherPairBelongsToOwnerTx) Find() (result *models.User, err error) {
	return result, a.tx.Find(&result)
}

func (a cipherPairBelongsToOwnerTx) Append(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a cipherPairBelongsToOwnerTx) Replace(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a cipherPairBelongsToOwnerTx) Delete(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a cipherPairBelongsToOwnerTx) Clear() error {
	return a.tx.Clear()
}

func (a cipherPairBelongsToOwnerTx) Count() int64 {
	return a.tx.Count()
}

type cipherPairDo struct{ gen.DO }

type ICipherPairDo interface {
	gen.SubQuery
	Debug() ICipherPairDo
	WithContext(ctx context.Context) ICipherPairDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICipherPairDo
	WriteDB() ICipherPairDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICipherPairDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICipherPairDo
	Not(conds ...gen.Condition) ICipherPairDo
	Or(conds ...gen.Condition) ICipherPairDo
	Select(conds ...field.Expr) ICipherPairDo
	Where(conds ...gen.Condition) ICipherPairDo
	Order(conds ...field.Expr) ICipherPairDo
	Distinct(cols ...field.Expr) ICipherPairDo
	Omit(cols ...field.Expr) ICipherPairDo
	Join(table schema.Tabler, on ...field.Expr) ICipherPairDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICipherPairDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICipherPairDo
	Group(cols ...field.Expr) ICipherPairDo
	Having(conds ...gen.Condition) ICipherPairDo
	Limit(limit int) ICipherPairDo
	Offset(offset int) ICipherPairDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICipherPairDo
	Unscoped() ICipherPairDo
	Create(values ...*models.CipherPair) error
	CreateInBatches(values []*models.CipherPair, batchSize int) error
	Save(values ...*models.CipherPair) error
	First() (*models.CipherPair, error)
	Take() (*models.CipherPair, error)
	Last() (*models.CipherPair, error)
	Find() ([]*models.CipherPair, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.CipherPair, err error)
	FindInBatches(result *[]*models.CipherPair, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.CipherPair) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICipherPairDo
	Assign(attrs ...field.AssignExpr) ICipherPairDo
	Joins(fields ...field.RelationField) ICipherPairDo
	Preload(fields ...field.RelationField) ICipherPairDo
	FirstOrInit() (*models.CipherPair, error)
	FirstOrCreate() (*models.CipherPair, error)
	FindByPage(offset int, limit int) (result []*models.CipherPair, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICipherPairDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c cipherPairDo) Debug() ICipherPairDo {
	return c.withDO(c.DO.Debug())
}

func (c cipherPairDo) WithContext(ctx context.Context) ICipherPairDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cipherPairDo) ReadDB() ICipherPairDo {
	return c.Clauses(dbresolver.Read)
}

func (c cipherPairDo) WriteDB() ICipherPairDo {
	return c.Clauses(dbresolver.Write)
}

func (c cipherPairDo) Session(config *gorm.Session) ICipherPairDo {
	return c.withDO(c.DO.Session(config))
}

func (c cipherPairDo) Clauses(conds ...clause.Expression) ICipherPairDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cipherPairDo) Returning(value interface{}, columns ...string) ICipherPairDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cipherPairDo) Not(conds ...gen.Condition) ICipherPairDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cipherPairDo) Or(conds ...gen.Condition) ICipherPairDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cipherPairDo) Select(conds ...field.Expr) ICipherPairDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cipherPairDo) Where(conds ...gen.Condition) ICipherPairDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cipherPairDo) Order(conds ...field.Expr) ICipherPairDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cipherPairDo) Distinct(cols ...field.Expr) ICipherPairDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cipherPairDo) Omit(cols ...field.Expr) ICipherPairDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cipherPairDo) Join(table schema.Tabler, on ...field.Expr) ICipherPairDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cipherPairDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICipherPairDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cipherPairDo) RightJoin(table schema.Tabler, on ...field.Expr) ICipherPairDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cipherPairDo) Group(cols ...field.Expr) ICipherPairDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cipherPairDo) Having(conds ...gen.Condition) ICipherPairDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cipherPairDo) Limit(limit int) ICipherPairDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cipherPairDo) Offset(offset int) ICipherPairDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cipherPairDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICipherPairDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cipherPairDo) Unscoped() ICipherPairDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cipherPairDo) Create(values ...*models.CipherPair) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cipherPairDo) CreateInBatches(values []*models.CipherPair, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cipherPairDo) Save(values ...*models.CipherPair) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cipherPairDo) First() (*models.CipherPair, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.CipherPair), nil
	}
}

func (c cipherPairDo) Take() (*models.CipherPair, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.CipherPair), nil
	}
}

func (c cipherPairDo) Last() (*models.CipherPair, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.CipherPair), nil
	}
}

func (c cipherPairDo) Find() ([]*models.CipherPair, error) {
	result, err := c.DO.Find()
	return result.([]*models.CipherPair), err
}

func (c cipherPairDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.CipherPair, err error) {
	buf := make([]*models.CipherPair, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cipherPairDo) FindInBatches(result *[]*models.CipherPair, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cipherPairDo) Attrs(attrs ...field.AssignExpr) ICipherPairDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cipherPairDo) Assign(attrs ...field.AssignExpr) ICipherPairDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cipherPairDo) Joins(fields ...field.RelationField) ICipherPairDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cipherPairDo) Preload(fields ...field.RelationField) ICipherPairDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cipherPairDo) FirstOrInit() (*models.CipherPair, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.CipherPair), nil
	}
}

func (c cipherPairDo) FirstOrCreate() (*models.CipherPair, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.CipherPair), nil
	}
}

func (c cipherPairDo) FindByPage(offset int, limit int) (result []*models.CipherPair, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cipherPairDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cipherPairDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cipherPairDo) Delete(models ...*models.CipherPair) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cipherPairDo) withDO(do gen.Dao) *cipherPairDo {
	c.DO = *do.(*gen.DO)
	return c
}
