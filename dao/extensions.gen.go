// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ucasers/go-backend/backend/models"
)

func newExtension(db *gorm.DB, opts ...gen.DOOption) extension {
	_extension := extension{}

	_extension.extensionDo.UseDB(db, opts...)
	_extension.extensionDo.UseModel(&models.Extension{})

	tableName := _extension.extensionDo.TableName()
	_extension.ALL = field.NewAsterisk(tableName)
	_extension.ID = field.NewUint32(tableName, "id")
	_extension.Title = field.NewString(tableName, "title")
	_extension.Description = field.NewString(tableName, "description")
	_extension.Content = field.NewString(tableName, "content")
	_extension.Tag = field.NewString(tableName, "tag")
	_extension.CreatedAt = field.NewTime(tableName, "created_at")
	_extension.UpdatedAt = field.NewTime(tableName, "updated_at")
	_extension.OwnerID = field.NewUint32(tableName, "owner_id")
	_extension.Owner = extensionBelongsToOwner{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Owner", "models.User"),
	}

	_extension.fillFieldMap()

	return _extension
}

type extension struct {
	extensionDo extensionDo

	ALL         field.Asterisk
	ID          field.Uint32
	Title       field.String
	Description field.String
	Content     field.String
	Tag         field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time
	OwnerID     field.Uint32
	Owner       extensionBelongsToOwner

	fieldMap map[string]field.Expr
}

func (e extension) Table(newTableName string) *extension {
	e.extensionDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e extension) As(alias string) *extension {
	e.extensionDo.DO = *(e.extensionDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *extension) updateTableName(table string) *extension {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewUint32(table, "id")
	e.Title = field.NewString(table, "title")
	e.Description = field.NewString(table, "description")
	e.Content = field.NewString(table, "content")
	e.Tag = field.NewString(table, "tag")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")
	e.OwnerID = field.NewUint32(table, "owner_id")

	e.fillFieldMap()

	return e
}

func (e *extension) WithContext(ctx context.Context) IExtensionDo {
	return e.extensionDo.WithContext(ctx)
}

func (e extension) TableName() string { return e.extensionDo.TableName() }

func (e extension) Alias() string { return e.extensionDo.Alias() }

func (e extension) Columns(cols ...field.Expr) gen.Columns { return e.extensionDo.Columns(cols...) }

func (e *extension) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *extension) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 9)
	e.fieldMap["id"] = e.ID
	e.fieldMap["title"] = e.Title
	e.fieldMap["description"] = e.Description
	e.fieldMap["content"] = e.Content
	e.fieldMap["tag"] = e.Tag
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["owner_id"] = e.OwnerID

}

func (e extension) clone(db *gorm.DB) extension {
	e.extensionDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e extension) replaceDB(db *gorm.DB) extension {
	e.extensionDo.ReplaceDB(db)
	return e
}

type extensionBelongsToOwner struct {
	db *gorm.DB

	field.RelationField
}

func (a extensionBelongsToOwner) Where(conds ...field.Expr) *extensionBelongsToOwner {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a extensionBelongsToOwner) WithContext(ctx context.Context) *extensionBelongsToOwner {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a extensionBelongsToOwner) Session(session *gorm.Session) *extensionBelongsToOwner {
	a.db = a.db.Session(session)
	return &a
}

func (a extensionBelongsToOwner) Model(m *models.Extension) *extensionBelongsToOwnerTx {
	return &extensionBelongsToOwnerTx{a.db.Model(m).Association(a.Name())}
}

type extensionBelongsToOwnerTx struct{ tx *gorm.Association }

func (a extensionBelongsToOwnerTx) Find() (result *models.User, err error) {
	return result, a.tx.Find(&result)
}

func (a extensionBelongsToOwnerTx) Append(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a extensionBelongsToOwnerTx) Replace(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a extensionBelongsToOwnerTx) Delete(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a extensionBelongsToOwnerTx) Clear() error {
	return a.tx.Clear()
}

func (a extensionBelongsToOwnerTx) Count() int64 {
	return a.tx.Count()
}

type extensionDo struct{ gen.DO }

type IExtensionDo interface {
	gen.SubQuery
	Debug() IExtensionDo
	WithContext(ctx context.Context) IExtensionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IExtensionDo
	WriteDB() IExtensionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IExtensionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IExtensionDo
	Not(conds ...gen.Condition) IExtensionDo
	Or(conds ...gen.Condition) IExtensionDo
	Select(conds ...field.Expr) IExtensionDo
	Where(conds ...gen.Condition) IExtensionDo
	Order(conds ...field.Expr) IExtensionDo
	Distinct(cols ...field.Expr) IExtensionDo
	Omit(cols ...field.Expr) IExtensionDo
	Join(table schema.Tabler, on ...field.Expr) IExtensionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IExtensionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IExtensionDo
	Group(cols ...field.Expr) IExtensionDo
	Having(conds ...gen.Condition) IExtensionDo
	Limit(limit int) IExtensionDo
	Offset(offset int) IExtensionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IExtensionDo
	Unscoped() IExtensionDo
	Create(values ...*models.Extension) error
	CreateInBatches(values []*models.Extension, batchSize int) error
	Save(values ...*models.Extension) error
	First() (*models.Extension, error)
	Take() (*models.Extension, error)
	Last() (*models.Extension, error)
	Find() ([]*models.Extension, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Extension, err error)
	FindInBatches(result *[]*models.Extension, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Extension) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IExtensionDo
	Assign(attrs ...field.AssignExpr) IExtensionDo
	Joins(fields ...field.RelationField) IExtensionDo
	Preload(fields ...field.RelationField) IExtensionDo
	FirstOrInit() (*models.Extension, error)
	FirstOrCreate() (*models.Extension, error)
	FindByPage(offset int, limit int) (result []*models.Extension, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IExtensionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e extensionDo) Debug() IExtensionDo {
	return e.withDO(e.DO.Debug())
}

func (e extensionDo) WithContext(ctx context.Context) IExtensionDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e extensionDo) ReadDB() IExtensionDo {
	return e.Clauses(dbresolver.Read)
}

func (e extensionDo) WriteDB() IExtensionDo {
	return e.Clauses(dbresolver.Write)
}

func (e extensionDo) Session(config *gorm.Session) IExtensionDo {
	return e.withDO(e.DO.Session(config))
}

func (e extensionDo) Clauses(conds ...clause.Expression) IExtensionDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e extensionDo) Returning(value interface{}, columns ...string) IExtensionDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e extensionDo) Not(conds ...gen.Condition) IExtensionDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e extensionDo) Or(conds ...gen.Condition) IExtensionDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e extensionDo) Select(conds ...field.Expr) IExtensionDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e extensionDo) Where(conds ...gen.Condition) IExtensionDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e extensionDo) Order(conds ...field.Expr) IExtensionDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e extensionDo) Distinct(cols ...field.Expr) IExtensionDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e extensionDo) Omit(cols ...field.Expr) IExtensionDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e extensionDo) Join(table schema.Tabler, on ...field.Expr) IExtensionDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e extensionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IExtensionDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e extensionDo) RightJoin(table schema.Tabler, on ...field.Expr) IExtensionDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e extensionDo) Group(cols ...field.Expr) IExtensionDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e extensionDo) Having(conds ...gen.Condition) IExtensionDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e extensionDo) Limit(limit int) IExtensionDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e extensionDo) Offset(offset int) IExtensionDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e extensionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IExtensionDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e extensionDo) Unscoped() IExtensionDo {
	return e.withDO(e.DO.Unscoped())
}

func (e extensionDo) Create(values ...*models.Extension) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e extensionDo) CreateInBatches(values []*models.Extension, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e extensionDo) Save(values ...*models.Extension) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e extensionDo) First() (*models.Extension, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Extension), nil
	}
}

func (e extensionDo) Take() (*models.Extension, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Extension), nil
	}
}

func (e extensionDo) Last() (*models.Extension, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Extension), nil
	}
}

func (e extensionDo) Find() ([]*models.Extension, error) {
	result, err := e.DO.Find()
	return result.([]*models.Extension), err
}

func (e extensionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Extension, err error) {
	buf := make([]*models.Extension, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e extensionDo) FindInBatches(result *[]*models.Extension, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e extensionDo) Attrs(attrs ...field.AssignExpr) IExtensionDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e extensionDo) Assign(attrs ...field.AssignExpr) IExtensionDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e extensionDo) Joins(fields ...field.RelationField) IExtensionDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e extensionDo) Preload(fields ...field.RelationField) IExtensionDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e extensionDo) FirstOrInit() (*models.Extension, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Extension), nil
	}
}

func (e extensionDo) FirstOrCreate() (*models.Extension, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Extension), nil
	}
}

func (e extensionDo) FindByPage(offset int, limit int) (result []*models.Extension, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e extensionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e extensionDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e extensionDo) Delete(models ...*models.Extension) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *extensionDo) withDO(do gen.Dao) *extensionDo {
	e.DO = *do.(*gen.DO)
	return e
}
